import telebot
from telebot import types
from together import Together
import requests
import time

# —Ä—ñ–∑–Ω—ñ –∞–ø—ñ —Ç–∞ —Ç–æ–∫–µ–Ω–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º —Ç–∞ –º–æ–¥–µ–ª—è–º–∏
BOT_TOKEN = "PUT YOUR TOKEN HERE IF YOU WANT TO TEST"
TOGETHER_API_KEY = "PUT YOUR TOKEN HERE IF YOU WANT TO TEST"
API_URL = "PUT YOUR TOKEN HERE IF YOU WANT TO TEST"
headers = {"PUT YOUR TOKEN HERE IF YOU WANT TO TEST"}

bot = telebot.TeleBot(BOT_TOKEN)

# —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ–± –∑–Ω–∞—Ç–∏ –¥–µ –≤—ñ–Ω
user_mode = {}

# –º–µ–Ω—é
@bot.message_handler(commands=['start', 'menu', 'home', 'exit'])
def send_main_menu(message):
    # —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é
    menu_buttons = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ –Ω—å–æ–≥–æ –∫–Ω–æ–ø–æ–∫
    btn1 = types.KeyboardButton("GPTü§ñ")
    btn2 = types.KeyboardButton("Image Generationüåå")
    btn3 = types.KeyboardButton("Profile")
    btn4 = types.KeyboardButton("Close")
    # –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–æ –º–µ–Ω—é, —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è user_mode —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, —â–æ–± –∑–Ω–∞—Ç–∏ –¥–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    menu_buttons.add(btn1, btn2, btn3, btn4)
    user_mode[message.chat.id] = None

    bot.send_message(message.chat.id, "menu:", reply_markup=menu_buttons)

# Text AI
# –º–∞—Å–∏–≤ –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É
chat_histories = {}

# —Ñ—É–Ω–∫—Ü—ñ—è –ª–æ–≤–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è GPTü§ñ —è–∫–µ –¥—Ä—É–∫—É—î—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç—Ç—ñ –∫–Ω–æ–æ–ø–∫–∏
@bot.message_handler(func=lambda message: message.text == "GPTü§ñ")
def together_ai(message):
    bot.send_message(message.chat.id, "Ask your question or type /exit to return to the menu",
                     reply_markup=types.ReplyKeyboardRemove())
    # –º–∞—Å–∏–≤ –¥–ª—è –∑–∞–ø–∏—Å—É —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É, —â–æ–± AI –ø–∞–º'—è—Ç–∞–≤ –ø–æ–ø–µ—Ä–µ–¥—å–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
    chat_histories[message.chat.id] = [{"role": "system", "content": ""}]
    # –ø—Ä–∏—Å–≤–æ—î–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å—Ç–∞—Ç—É—Å—É gpt
    user_mode[message.chat.id] = "gpt"

# —Ñ—É–Ω–∫—Ü—ñ—è –ª–æ–≤–∏—Ç—å –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ gpt
@bot.message_handler(func=lambda message: user_mode.get(message.chat.id) == "gpt")
def ask_together_ai(message):
    # —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ, —Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
    client = Together(api_key=TOGETHER_API_KEY)
    chat_histories[message.chat.id].append({"role": "user", "content": message.text})

    # –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    answer = client.chat.completions.create(
        model="meta-llama/Llama-3.3-70B-Instruct-Turbo",
        temperature=0.7,
        top_p=0.9,
        messages=chat_histories[message.chat.id],
    )

    # –æ—Ç—Ä–∏–º–∞–Ω–Ω—è, –≤–∏–¥–¥–∞—á–∞ —Ç–∞ –∑–∞–ø–∏—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    response_text = answer.choices[0].message.content
    bot.send_message(message.chat.id, response_text)
    chat_histories[message.chat.id].append({"role": "assistant", "content": response_text})

# Image Generation
# —Ç—É—Ç –∫–æ–¥ –ª–æ–≤–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Image Generationüåå —è–∫–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda message: message.text == "Image Generationüåå")
def request_image_prompt(message):
    bot.send_message(message.chat.id, "Enter your prompt, or type /exit to return to the menu", reply_markup=types.ReplyKeyboardRemove())
    # –ø—Ä–∏—Å–≤–æ—î–Ω–Ω—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    user_mode[message.chat.id] = "img_g"

# —Ñ—É–Ω–∫—Ü—ñ—è –ª–æ–≤–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ img_g
@bot.message_handler(func=lambda message: user_mode.get(message.chat.id) == "img_g")
def generate_images(message):
    seed = int(time.time() * 1000)
    # –≤–∏–∫–ª–∏–∫ –º–æ–¥–µ–ª—ñ
    def query(payload):
        bot.send_message(message.chat.id, "‚è≥ Generating image...")
        # –∑–∞–ø–∏—Å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–µ–º–∞—î –ø–æ–º–∏–ª–æ–∫
        response = requests.post(API_URL, headers=headers, json=payload)
        if response.status_code == 200:
            return response.content
        else:
            print(f"Error: {response.status_code}")
            bot.send_message(message.chat.id, "sorry something went wrong, try again later")

    # –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    image = query({
    "inputs": message.text,
    "options": {
        "num_inference_steps": 150,
        "seed": seed
    }
})
    # –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    bot.send_photo(message.chat.id, image)



# Other stuff
# –º—ñ–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—è —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@bot.message_handler(func=lambda message: message.text == "Profile")
def close_menu(message):
    bot.send_message(message.chat.id, f"name:{message.from_user.first_name}"
                                      f"\nusername:{message.from_user.username}"
                                      f"\nid:{message.from_user.id}"
                                      f"\npremium:{message.from_user.is_premium}")







# —Ñ—É–Ω–∫—Ü—ñ—è, —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏ –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text == "Close")
def close_menu(message):
    bot.send_message(message.chat.id, "See ya soon", reply_markup=types.ReplyKeyboardRemove())

# —Ñ—É–Ω–∫—Ü—ñ—è info, —è–∫–∞ –º–∞–ª–∞ –± –≤–∏–≤–æ–¥–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞.
@bot.message_handler(commands=['info'])
def info_command(message):
    bot.send_message(message.chat.id, "Too lazy to write allatüòûüòì")

# ü§´
@bot.message_handler(commands=['secret'])
def secret(message):
    bot.send_message(message.chat.id,'https://youtu.be/dQw4w9WgXcQ?si=NlklcvW9zAWhss4t')

print("Bot started...")
# –∫–æ–º–∞–Ω–¥–∞ —è–∫–∞ –∑–∞—Å—Ç–∞–≤–ª—è—î –±–æ—Ç–∞ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤—ñ—á–Ω–æ
bot.polling()
